name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
#  lint:
#    runs-on: ubuntu-24.04
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#
#    - name: Build Docker image (cached)
#      uses: docker/build-push-action@v6
#      with:
#        context: .
#        tags: chesscxx:latest
#        load: true
#        cache-from: type=gha
#        cache-to: type=gha,mode=max
#
#    - name: Lint
#      run: docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest cmake -P cmake/lint.cmake
#
#    - name: Spell check
#      run: docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest cmake -P cmake/spell.cmake
#
#  iwyu:
#    needs: [lint]
#
#    runs-on: ubuntu-24.04
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#
#    - name: Build Docker image (cached)
#      uses: docker/build-push-action@v6
#      with:
#        context: .
#        tags: chesscxx:latest
#        load: true
#        cache-from: type=gha
#        cache-to: type=gha,mode=max
#
#    - name: IWYU check
#      run: docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest cmake -P cmake/iwyu.cmake

  test:
    #needs: [iwyu]

    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (cached)
      uses: docker/build-push-action@v6
      with:
        context: .
        tags: chesscxx:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Cache ccache directory
      uses: actions/cache@v4
      with:
        path: ~/ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    - name: Configure
      run: docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest cmake --preset=ci-ubuntu

    - name: Build
      run: |
        docker run --rm -v $(pwd)/:/chesscxx -v ~/ccache:/root/.cache/ccache -w /chesscxx chesscxx:latest \
        sh -c "ccache -p && ccache -s && ccache -z && cmake --build build --config Release -j \$(nproc) && ccache -s"

    - name: Install
      run: docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest cmake --install build --config Release --prefix prefix

    - name: Test
      run: docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest sh -c "ctest --test-dir=build --output-on-failure --no-tests=error -C Release -j \$(nproc)"

    - name: Generate examples outputs
      run: docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest cmake --build build -t run-examples

    - name: Upload build directory
      uses: actions/upload-artifact@v4
      with:
        name: build-dir
        path: build
        include-hidden-files: true

  docs:
    needs: [test]

    runs-on: ubuntu-24.04

    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository_owner == 'igorqs'

    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (cached)
      uses: docker/build-push-action@v6
      with:
        context: .
        tags: chesscxx:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Download build directory
      uses: actions/download-artifact@v4
      with:
        name: build-dir
        path: previous-build

    - name: Build docs
      run: |
        docker run --rm -v $(pwd)/:/chesscxx -w /chesscxx chesscxx:latest \
        cmake "-DPROJECT_SOURCE_DIR=/chesscxx" "-DPROJECT_BINARY_DIR=/chesscxx/build" "-DEXAMPLES_BINARY_DIR=/chesscxx/previous-build" -P cmake/docs.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/sphinx
